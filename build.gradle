apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

buildscript {
  apply from: "${rootDir}/gradle/dependencies.gradle"

  repositories {
    jcenter()
  }

  dependencies {
    classpath gradle_plugins.bundle
    classpath gradle_plugins.coveralls
    classpath gradle_plugins.jmh
    classpath gradle_plugins.nexus
    classpath gradle_plugins.semantic_versioning
    classpath gradle_plugins.stats
    classpath gradle_plugins.versions
  }
}

subprojects { proj ->
  apply from: "${rootDir}/gradle/jmh.gradle"
  apply from: "${rootDir}/gradle/publish.gradle"
  apply from: "${rootDir}/gradle/code_quality.gradle"
  apply from: "${rootDir}/gradle/dependencies.gradle"
  apply from: "${rootDir}/gradle/object_layout.gradle"

  apply plugin: 'com.github.ethankhall.semantic-versioning'
  apply plugin: 'org.dm.bundle'
  apply plugin: 'java'

  sourceCompatibility = JavaVersion.VERSION_1_8
  compileJava.options.incremental = true

  group = 'com.github.ben-manes.caffeine'
  version.with {
    major = 1 // incompatible API changes
    minor = 0 // backwards-compatible additions
    patch = 0 // backwards-compatible bug fixes
    releaseBuild = rootProject.hasProperty('release')
  }

  repositories {
    jcenter()
  }
  
  configurations {
    testArtifacts
  }
  
  task testJar(type: Jar, group: "Build") {
    description = "Assembles a jar archive containing the test classes."
    baseName = "${project.name}-test"
    from sourceSets.test.output
  }
  
  artifacts {
    testArtifacts testJar
  }
}

repositories {
  jcenter()
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports', dependsOn: subprojects.test) {
  description = 'Generates an aggregate report from all subprojects'
  additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories = files(subprojects.sourceSets.main.output)
  executionData = files(subprojects.jacocoTestReport.executionData)

  reports {
    html.enabled = true
    xml.enabled = true
    csv.enabled = false
  }

  doFirst {
    executionData = files(executionData.findAll { it.exists() })
  }
}

coveralls {
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
  subprojects.sourceSets.main.allSource.srcDirs*.path.each { sourceDirs.addAll(it) }
}

tasks.coveralls {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Coveralls'

  dependsOn jacocoRootReport
  onlyIf { System.env.'CI' }
}
