/**
 * Defines dependencies and versions shared across modules.
 *
 * Multiple dependencies can be shared under the same name:
 *   spring: [
 *     "org.springframework:spring-core:${versions.spring}",
 *     "org.springframework:spring-jdbc:${versions.spring}"
 *   ]
 *
 * Use DependencyHandler.create for advanced dependency configuration:
 *   dependencies.create("org.springframework:spring-core:3.1") {
 *     // Force a version in case of the conflict
 *     force = true
 *
 *     // Disable all transitive dependencies
 *     transitive = false
 *
 *     // exclude a transitive dependency
 *     exclude module: "org.unwanted:unwantedModule" // by group & name
 *     exclude module: "unwantedModule"              // by artifact name
 *     exclude group:  "org.unwanted'                // by artifact group
 *   }
 *
 * @see http://gradle.org/docs/current/javadoc/org/gradle/api/artifacts/dsl/DependencyHandler.html
 */
ext {
  versions = [
    guava: '18.0',
    jsr305: '3.0.0',
  ]
  test_versions = [
    awaitility: '1.6.3',
    easymock: '3.3.1',
    mockito: '1.10.19',
    junit: '4.12',
    testng: '6.8.13',
    truth: '0.24',
  ]
  benchmark_versions = [
    concurrentlinkedhashmap: '1.4.1',
    high_scale_lib: '1.0.6',
    jmh: '1.4.1',
    koloboke: '0.6.5',
  ]
  plugin_versions = [
    bundle: '0.6.2',
    checkstyle: '6.2',
    coveralls: '2.1.0',
    jmh: '0.1.3',
    nexus: '2.2',
    versions: '0.6',
    semantic_versioning: '1.1.0',
    stats: '0.1.3',
  ]

  libraries = [
    guava: "com.google.guava:guava:${versions.guava}",
    jsr305: "com.google.code.findbugs:jsr305:${versions.jsr305}",
  ]
  test_libraries = [
    awaitility: "com.jayway.awaitility:awaitility-scala:${test_versions.awaitility}",
    easymock: "org.easymock:easymock:${test_versions.easymock}",
    guava_testlib: dependencies.create("com.google.guava:guava-testlib:${versions.guava}") {
      exclude group: 'com.google.truth'
      exclude group: 'junit'
    },
    junit: "junit:junit:${test_versions.junit}",
    mockito: "org.mockito:mockito-core:${test_versions.mockito}",
    testng: dependencies.create("org.testng:testng:${test_versions.testng}") {
      exclude group: "junit"
    },
    truth: "com.google.truth:truth:${test_versions.truth}",
  ]
  benchmark_libraries = [
    concurrentlinkedhashmap: "com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:${benchmark_versions.concurrentlinkedhashmap}",
    high_scale_lib: "com.boundary:high-scale-lib:${benchmark_versions.high_scale_lib}",
    jmh: [
      "org.openjdk.jmh:jmh-generator-annprocess:${benchmark_versions.jmh}",
      "org.openjdk.jmh:jmh-core:${benchmark_versions.jmh}",
    ],
    koloboke: [
      "net.openhft:koloboke-api-jdk8:${benchmark_versions.koloboke}",
      "net.openhft:koloboke-impl-jdk8:${benchmark_versions.koloboke}",
    ]
  ]
  gradle_plugins = [
    bundle: "org.dm.gradle:gradle-bundle-plugin:${plugin_versions.bundle}",
    checkstyle: dependencies.create("com.puppycrawl.tools:checkstyle:${plugin_versions.checkstyle}") {
      transitive = false
    },
    coveralls: "org.kt3k.gradle.plugin:coveralls-gradle-plugin:${plugin_versions.coveralls}",
    jmh: "me.champeau.gradle:jmh-gradle-plugin:${plugin_versions.jmh}",
    nexus: "com.bmuschko:gradle-nexus-plugin:${plugin_versions.nexus}",
    semantic_versioning: "io.ehdev:gradle-semantic-versioning:${plugin_versions.semantic_versioning}",
    stats: "org.kordamp.gradle:stats-gradle-plugin:${plugin_versions.stats}",
    versions: "com.github.ben-manes:gradle-versions-plugin:${plugin_versions.versions}",
  ]
}
