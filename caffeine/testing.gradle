/**
 * The configuration to break cache tests into independant tasks.
 */
test {
  exclude 'com/github/benmanes/caffeine/cache/**'
}
 
configurations {
  [ slowCaffeineTest, slowGuavaTest,
    strongKeysAndStrongValuesCaffeineTest, strongKeysAndStrongValuesGuavaTest,
    strongKeysAndWeakValuesCaffeineTest, strongKeysAndWeakValuesGuavaTest,
    strongKeysAndSoftValuesCaffeineTest, strongKeysAndSoftValuesGuavaTest,
    weakKeysAndStrongValuesCaffeineTest, weakKeysAndStrongValuesGuavaTest,
    weakKeysAndWeakValuesCaffeineTest, weakKeysAndWeakValuesGuavaTest,
    weakKeysAndSoftValuesCaffeineTest, weakKeysAndSoftValuesGuavaTest
  ]*.each {
    it.extendsFrom testCompile
    it.extendsFrom testRuntime
  }
}

def testConfigurations = configurations*.name.findAll { it.contains('Test') }
sourceSets {
  testConfigurations.each {
    def sourceSet = sourceSets.maybeCreate it
    sourceSet.java.srcDir 'src/test/java'
    sourceSet.resources.srcDir 'src/test/resources'
  }
}

testConfigurations.each { testName ->
  def implementations = ['Caffeine', 'Guava']
  def implementation = implementations.find { testName.contains(it) }
  def testType = testName.minus(implementation + 'Test')
  
  def labels = testType.split('And').collect { it[0].toLowerCase() + it.substring(1) }
  task "${testName}"(type: Test) {
    useTestNG()
    group = 'Cache tests'
    description = "Runs ${labels.join(' with ')} ${implementation} tests."
    include 'com/github/benmanes/caffeine/cache/**'

    testClassesDir = sourceSets."${name}".output.classesDir
    classpath = sourceSets."${name}".runtimeClasspath
    if (labels.size() == 2) {
      def strength = labels.collect{ it.split('Keys|Values') }.flatten()
      systemProperties['keys'] = strength[0]
      systemProperties['values'] = strength[1]
    }
    systemProperties['implementation'] = implementation

    // ensure we don't overwrite default report directories used by 'test' task
    reports.html.destination = "${buildDir}/reports/${name}"
    reports.junitXml.destination = "${buildDir}/${name}-results"
    binResultsDir = file("${buildDir}/${name}-results/binary/${name}")

    // Configure task dependencies
    if (System.env.'CI' || !name.contains('slow')) {
      tasks.test.dependsOn(it)
    }
    dependencies {
      "${name}Compile" sourceSets.main.output, sourceSets.test.output
      "${name}Compile" configurations.compile, configurations.testCompile
      "${name}Runtime" configurations.runtime, configurations.testRuntime
    }
  }
}

tasks.withType(Test) {
  useTestNG()
  if (name.contains('slow')) {
    maxHeapSize = '128m'
    testLogging.info.events 'passed'
    options.includeGroups = ['slow']
  } else {
    maxHeapSize = '384m'
    options {
      threadCount = System.env.'CI' ? 2 : 6
      excludeGroups = ['slow']
      parallel = 'methods'
    }
  }
}

task stress(type: JavaExec, group: 'Cache tests', description: 'Executes a stress test') {
  classpath sourceSets.jmh.runtimeClasspath
  main = 'com.github.benmanes.caffeine.cache.Stresser'
}
