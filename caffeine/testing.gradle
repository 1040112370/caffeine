/**
 * The configuration to break cache tests into independant tasks.
 */
test {
  exclude 'com/github/benmanes/caffeine/cache/**'
}

def implementations = ['Caffeine', 'Guava']
def testConfigurations = [
  'strongKeysAndStrongValues', 'strongKeysAndWeakValues',
  'weakKeysAndStrongValues', 'weakKeysAndWeakValues', 'weakKeysAndSoftValues']
  .collectNested { [it, it + 'Stats'] }
  .collectNested { it.contains('StrongValues') ? [it + 'Sync', it + 'Async'] : (it + 'Sync') }
  .plus('slow')
  .collectNested { type -> implementations.collect { type + it + 'Test' } }.flatten()

testConfigurations.each {
  // Create configurations
  def config = configurations.maybeCreate it
  config.extendsFrom configurations.testCompile
  config.extendsFrom configurations.testRuntime
  
  // Create sourceSets
  def sourceSet = sourceSets.maybeCreate it
  sourceSet.java.srcDir 'src/test/java'
  sourceSet.resources.srcDir 'src/test/resources'
}

testConfigurations.each { testName ->
  def isAsync = testName.contains('Async')
  def hasStats = testName.contains('Stats')
  def implementation = implementations.find { testName.contains(it) }
  def testType = testName - implementation - 'Test' - 'Stats' - 'Async' - 'Sync'
  def labels = testType.split('And').collect { it[0].toLowerCase() + it.substring(1) }

  task "${testName}"(type: Test) {
    useTestNG()
    group = 'Cache tests'
    description = 'Runs ' + labels.join(' with ') + 
      implementation + ' and ' + (hasStats ? 'stats ' : 'no stats ') +
      (isAsync ? 'asynchronous' : 'synchronous') + ' tests.'
    include 'com/github/benmanes/caffeine/cache/**'

    testClassesDir = sourceSets."${name}".output.classesDir
    classpath = sourceSets."${name}".runtimeClasspath
    if (labels.size() == 2) {
      def strength = labels.collect{ it.split('Keys|Values') }.flatten()
      systemProperties['keys'] = strength[0]
      systemProperties['values'] = strength[1]
    }
    systemProperties['implementation'] = implementation
    systemProperties['compute'] = isAsync ? 'async' : 'sync'
    systemProperties['stats'] = hasStats ? 'enabled' : 'disabled'

    // ensure we don't overwrite default report directories used by 'test' task
    reports.html.destination = "${buildDir}/reports/${name}"
    reports.junitXml.destination = "${buildDir}/${name}-results"
    binResultsDir = file("${buildDir}/${name}-results/binary/${name}")

    // Configure task dependencies
    if (System.env.'CI' || !name.startsWith('slow')) {
      tasks.test.dependsOn(it)
    }
    dependencies {
      "${name}Compile" sourceSets.main.output, sourceSets.test.output
      "${name}Compile" configurations.compile, configurations.testCompile
      "${name}Runtime" configurations.runtime, configurations.testRuntime
    }
  }
}

tasks.withType(Test) {
  useTestNG()
  if (name.startsWith('slow')) {
    maxHeapSize = '128m'
    options.includeGroups = ['slow']
  } else {
    options {
      excludeGroups = ['slow']
      parallel = 'methods'
      threadCount = 6
    }
  }
  systemProperty 'caffeine.tracing.enabled', 'false'
}

task stress(type: JavaExec, group: 'Cache tests', description: 'Executes a stress test') {
  classpath sourceSets.test.runtimeClasspath
  main = 'com.github.benmanes.caffeine.cache.Stresser'
}
