apply from: "${rootDir}/gradle/jmh.gradle"
apply from: "${projectDir}/testing.gradle"
  
sourceSets {
  javaPoet {
    java.srcDir 'src/javaPoet/java'
  }
  main {
    java.srcDir "${buildDir}/generated-sources/"
  }
}

configurations {
  javaAgent
}

plugins.withType(EclipsePlugin) {
  project.eclipse.classpath.plusConfigurations += [ configurations.javaPoetCompile ]
}

dependencies {
  compile project(':tracing:api')
  compile libraries.jsr305

  testCompile project(':simulator')
  testCompile project(path: ':tracing:api', configuration: 'testArtifacts')
  testCompile libraries.guava
  testCompile test_libraries.awaitility
  testCompile test_libraries.guava_testlib
  testCompile test_libraries.mockito
  testCompile test_libraries.testng

  javaAgent benchmark_libraries.jamm

  jmh libraries.flip_tables
  jmh benchmark_libraries.jamm
  jmh benchmark_libraries.koloboke
  jmh benchmark_libraries.high_scale_lib
  jmh benchmark_libraries.concurrentlinkedhashmap
  
  javaPoetCompile libraries.guava
  javaPoetCompile libraries.jsr305
  javaPoetCompile libraries.javapoet
}

bundle {
  instruction 'Import-Package', 'sun.misc.*;resolution:=optional'
  instruction 'Export-Package', 'com.github.benmanes.caffeine.*'
}

task generateLocalCaches(type: JavaExec) {
  main = 'com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator'
  classpath = sourceSets.javaPoet.runtimeClasspath
  args "${buildDir}/generated-sources/"
}
compileJava.dependsOn(generateLocalCaches)

task generateNodes(type: JavaExec) {
  main = 'com.github.benmanes.caffeine.cache.NodeFactoryGenerator'
  classpath = sourceSets.javaPoet.runtimeClasspath
  args "${buildDir}/generated-sources/"
}
compileJava.dependsOn(generateNodes)

task memoryOverhead(type: JavaExec, group: 'Benchmarks', description: 'Evaluates cache overhead') {
  classpath sourceSets.jmh.runtimeClasspath
  jvmArgs "-javaagent:${configurations.javaAgent.singleFile}"
  main = 'com.github.benmanes.caffeine.cache.MemoryBenchmark'
}
