/**
 * JCache compatibility adapter.
 */
configurations {
  tck
}

dependencies {
  compile project(':caffeine')
  compile libraries.jcache
  compile libraries.config

  testCompile libraries.guava
  testCompile test_libraries.junit
  testCompile test_libraries.testng
  testCompile test_libraries.mockito
  testCompile test_libraries.hamcrest
  testCompile test_libraries.jcache_tck
  testCompile test_libraries.jcache_tck_tests
  testCompile test_libraries.jcache_guice

  tck dependencies.create(test_libraries.jcache_tck_tests) {
    transitive = false
  }
}

bundle {
  instruction 'Export-Package', 'com.github.benmanes.caffeine.jcache.*'
}

test {
  useTestNG()
}

// Executed separately to minimize races due to poor test practices 
task testJCacheLoader(type: Test) {
  include "**/CacheLoader*"
}

task testCompatibilityKit(type: Test, description: "Runs the JCache TCK") {
  dependsOn(testJCacheLoader)
  exclude "**/CacheLoader*"
}

task unzipTestKit(type: Copy, group: 'Build', description: 'Unzips the JCache TCK') {
  from configurations.tck.collect { zipTree(it) }
  into { "${buildDir}/tck" }
}

[testJCacheLoader, testCompatibilityKit]*.with {
  group = "Build"

  check.dependsOn(it)
  dependsOn(unzipTestKit)

  useJUnit()
  testClassesDir = file("${buildDir}/tck")

  def pkg = 'com.github.benmanes.caffeine.jcache'
  systemProperty 'java.net.preferIPv4Stack', 'true'
  systemProperty 'caffeine.tracing.enabled', 'false'
  systemProperty 'javax.cache.Cache', "${pkg}.CacheProxy"
  systemProperty 'javax.cache.Cache.Entry', "${pkg}.EntryProxy"
  systemProperty 'javax.cache.CacheManager', "${pkg}.CacheManagerImpl"
  systemProperty 'org.jsr107.tck.management.agentId', 'CaffeineMBeanServer'
  systemProperty 'javax.management.builder.initial', "${pkg}.management.JCacheMBeanServerBuilder"
}
