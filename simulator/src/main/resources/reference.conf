####################################
#   Cache Simulator Config File    #
####################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

# See http://doc.akka.io/docs/akka/current/general/configuration.html
akka {
  loglevel = "WARNING"

  default-mailbox {
    mailbox-capacity = 10
    mailbox-type = "akka.dispatch.BoundedMailbox"
  }
}

caffeine.simulator {
  report {
    # Columns: policy, hit rate, requests, evictions, time
    sort-by = "policy"
    ascending = true
    
    # The output destination, either the console or a file path
    output = "console"
  }

  # The number of events to send per actor message
  batch-size = 1000

  # The maximum number of entries in the cache
  maximum-size = 500

  policies = [
    # Policies that provide an optimal upper bound
    "opt.Unbounded",
    "opt.Clairvoyant",

    # Policies based on maintaining a linked-list cross-cutting the hash table
    "linked.Lru",
    "linked.Mru",
    "linked.Lfu",
    "linked.Mfu",
    "linked.Fifo",
    "linked.Clock",
    "linked.SegmentedLru",

    # Policies based on obtaining a random sampling from the hash table
    "sampled.Lru",
    "sampled.Mru",
    "sampled.Lfu",
    "sampled.Mfu",
    "sampled.Fifo",
    "sampled.Random",
    
    # Policies based on a victim cache (Fifo + TinyLfu admission)
    "victim.Lru"
    "victim.TuQueue",

    # Policies based on the 2Q algorithm
    "two-queue.TwoQueue",
    "two-queue.TuQueue",
    
    # Policies based on the LIRS algorithm
    "irr.JackrabbitLirs",
    "irr.InfinispanLirs",
    "irr.Lirs",
    "irr.ClockPro",
    
    # Policies based on the ARC algorithm
    "adaptive.Arc",
    "adaptive.Car",
    "adaptive.Cart",
  ]
  
  # The admission policy (opposite of eviction policy)
  admission = {
    admittors = [
      "None",
      "TinyLfu",
    ]
    
    eps = "0.0001"
    confidence = "0.99"
    sample_size = "5000"
  }

  segmented-lru {
    # The percentage for the protected queue
    percent-protected = "0.50"
  }

  victim-lru {
    # The percentage for the victim cache
    percent-victim = "0.90"
  }

  two-queue {
    # The percentage for the IN queue
    percent-in = "0.20"
    # The percentage for the OUT queue
    percent-out = "0.50"
  }

  tu-queue {
    # The percentage for the HOT queue
    percent-hot = "0.33"
    # The percentage for the WARM queue
    percent-warm = "0.33"
  }

  sampling {
    # The random sample size
    size = 8

    # guess: Chooses items at random until the sample size is reached
    # shuffle: http://en.wikipedia.org/wiki/Fisherâ€“Yates_shuffle
    # reservoir: http://en.wikipedia.org/wiki/Reservoir_sampling
    strategy = "guess"
  }

  # file: reads from a trace file
  # synthetic: reads from a synthetic generator
  source = "file"

  file {
    # the path to the trace file, or the file name if in the format's package
    path = "multi1.trc.gz"

    # address: format of program address traces
    # arc: format from the authors of the ARC algorithm
    # caffeine-text: text format from the tracing package
    # caffeine-binary: binary format from the tracing package
    # lirs: format from the authors of the LIRS algorithm
    # wikipedia: compact format of the Wikipedia request traces
    format = "lirs"
  }

  synthetic {
    # The number of events to generate
    events = 10000

    # See the supported distributions and their configurations below
    distribution = "scrambled-zipfian"

    # A sequence of unique integers starting from...
    counter.start = 1

    # A sequence based on an exponential distribution with a mean arrival rate of gamma
    exponential.mean = 1.0

    # A sequence resembling a hotspot distribution where x% of operations access y% of data items
    hotspot {
      # The lower bound of the distribution
      lower-bound = 1
      # The upper bound of the distribution
      upper-bound = 1000
      # The percentage of the of the interval which comprises the hot set
      hotset-fraction = 0.25
      # The percentage of operations that access the hot set
      hot-opn-fraction = 0.25
    }

    # A sequence where some items are more popular than others, according to a
    # zipfian distribution
    zipfian {}

    # A zipfian sequence that scatters the "popular" items across the item space. Use if you don't
    # want the head of the distribution (the popular items) clustered together.
    scrambled-zipfian {}

    # A zipfian sequence with a popularity distribution of items, skewed to favor recent items
    # significantly more than older items
    skewed-zipfian-latest {}

    # A sequence that is generated from the specified set uniformly randomly
    uniform {
      lower-bound = 1
      upper-bound = 1000
    }
  }
}
